library(ggplot2)
library(ggplot2)
install.packages("devtools")
library(devtools)
library(ggplot2)
library(ggplot2)
library(ggplot2)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
library(dplyr)
install.packages("dplyr")
install.packages("ggplot2")
install_github("StatsWithR/statsr")
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
library(statsr)
install.packages("dplyr")
install.packages("dplyr")
install_github("StatsWithR/statsr")
install_github("StatsWithR/statsr")
library(ggplot2)
library(dplyr)
library(statsr)
install.packages("statstr")
install.packages("rmarkdown")
install.packages("broom")
install.packages("gridExtra")
install.packages("shiny")
install.packages("cubature")
library(devtools)
install_github("StatsWithR/statsr")
library(ggplot2)
library(dplyr)
library(statsr)
library(plyr)
library(GGally)
install.packages("GGally")
library(ggplot2)
library(dplyr)
library(statsr)
library(plyr)
library(GGally)
load("movies.Rdata")
ggplot(data = movies, aes(x = audience_score, y = critics_score )) +
geom_jitter() +
geom_smooth(method = "lm", se = FALSE)
criticsindex <-lm(critics_score ~ audience_score, data = movies)
summary(criticsindex)
hist(criticsindex$residuals)
qqnorm(criticsindex$residuals)
qqline(criticsindex$residuals)
ggplot(data = criticsindex, aes(x = .fitted, y=.resid)) +
geom_point() + geom_hline(yintercept = 0, linetype = "dashed")+
xlab("Fitted")
ylab("Residuals")
movies_sub <- movies[c(4,7,8,14,18)]
ggp = ggpairs(movies_sub)
print(ggp, progress = FALSE)
voteindex <-lm(imdb_num_votes ~ audience_score, data = movies)
summary(voteindex)
ggplot(data = movies, aes(x = imdb_num_votes, y = audience_score)) +
geom_jitter() +
geom_smooth(method = "lm", se = FALSE)
hist(voteindex$residuals)
qqnorm(voteindex$residuals)
qqline(voteindex$residuals)
ggplot(data = voteindex, aes(x = .fitted, y=.resid)) +
geom_point() + geom_hline(yintercept = 0, linetype = "dashed")+
xlab("Fitted")
ylab("Residuals")
Runtimeindex <-lm(runtime ~ audience_score, data = movies)
summary(Runtimeindex)
ggplot(data = movies, aes(x = runtime, y = audience_score)) +
geom_jitter() +
geom_smooth(method = "lm", se = FALSE)
hist(Runtimeindex$residuals)
qqnorm(Runtimeindex$residuals)
qqline(Runtimeindex$residuals)
ggplot(data = Runtimeindex, aes(x = .fitted, y=.resid)) +
geom_point() + geom_hline(yintercept = 0, linetype = "dashed")+
xlab("Fitted")
ylab("Residuals")
ggplot(data = movies, aes(x = best_pic_win, y = audience_score)) +
geom_jitter()
ggplot(data = movies, aes(x = best_pic_nom, y = audience_score)) +
geom_jitter()
ggplot(data = movies, aes(x = best_actor_win, y = audience_score)) +
geom_jitter()
ggplot(data = movies, aes(x = best_actress_win, y = audience_score)) +
geom_jitter()
ggplot(data = movies, aes(x = genre, y = audience_score)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(data = movies, aes(x = genre, y = audience_score)) +
geom_jitter() +
geom_smooth(method = "lm")
eval_score = lm(audience_score ~ critics_score  + genre + best_pic_nom + best_pic_win + best_actor_win + best_dir_win + best_actress_win + runtime, data = movies)
summary(eval_score)
eval_score_1 = lm(audience_score ~ critics_score, data = movies)
summary(eval_score_1)$adj.r.squared
eval_score_2 = lm(audience_score ~ critics_score  + best_pic_nom, data = movies)
summary(eval_score_2)$adj.r.squared
eval_score_3 = lm(audience_score ~ critics_score + best_pic_nom + runtime, data = movies)
summary(eval_score_3)$adj.r.squared
eval_score_4 = lm(audience_score ~ critics_score + best_pic_nom + runtime + genre, data = movies)
summary(eval_score_4)$adj.r.squared
audience_score_critics_score_90_best_pic_yes_runtime_90mins_horror = 28.651233 + 90*.44098 + 10.031682 + 90*.061815 -8.452251
audience_score_critics_score_90_best_pic_yes_runtime_90mins_horror
audience_score_critics_score_90_best_pic_yes_runtime_90mins_drama = 28.651233 + 90*.44098 + 10.031682 + 90*.061815 + 1.859378
audience_score_critics_score_90_best_pic_yes_runtime_90mins_drama
summary(eval_score_4)
qt(.025,df=636)
#Drama
1.53573 + 1.963701*1.95587
1.53573 - 1.963701*1.95587
#Horror
-8.41533 + 1.963701*3.39202
-8.41533 - 1.963701*3.39202
library(ggplot2)
library(dplyr)
library(statsr)
load("gss.Rdata")
# The first step in answering the above questions is visualizing the data. In order to get the most accurate picture from our data, we need to get rid of blank values in the variables we plan to use:
gssfilt<-gss%>%
filter(!is.na(educ))
gssfilt2<-gssfilt%>%
filter(!is.na(polviews))
#Next, we create a table with the counts in each group to find out which groups have the largest and smallest numbers.
countspolviews <- table(gssfilt2$polviews)
barplot(countspolviews, main="gssfilt2",
xlab="polviews")
# It seems that those who hold 'Moderate' views have the largest numbers, while those with the most extreme views  (on either side of the political spectrum) number in the least.
#We can also complete a boxplot with the filtered dataset.
boxplot(gssfilt2$educ~gssfilt2$polviews)
#It seems that the broadest inter-quartile range belongs to the 'Extremely Liberal' category, while 'Moderates' have many more outliers. Outliers do present problems for ANOVA, but nevetheless, we will press ahead.
Libs<-gssfilt2%>%
filter(polviews=="Liberal")
Cons<-gssfilt2%>%
filter(polviews=="Conservative")
Slibs<-gssfilt2%>%
filter(polviews=="Slightly Liberal")
Scons<-gssfilt2%>%
filter(polviews=="Slightly Conservative")
Exlibs<-gssfilt2%>%
filter(polviews=="Extremely Liberal")
Excons<-gssfilt2%>%
filter(polviews=="Extrmly Conservative")
Mods<-gssfilt2%>%
filter(polviews=="Moderate")
#Next, we can find the average level of edcuation for each group as below.
Mlibs<-Libs%>%
summarise(mean(educ))
Mcons<-Cons%>%
summarise(mean(educ))
MSlibs<-Slibs%>%
summarise(mean(educ))
MScons<-Scons%>%
summarise(mean(educ))
MExlibs<-Exlibs%>%
summarise(mean(educ))
MExcons<-Excons%>%
summarise(mean(educ))
Mmods<-Mods%>%
summarise(mean(educ))
Meangss<-gssfilt2%>%
summarise(mean(educ))
Mlibs
Mcons
MSlibs
MScons
MExlibs
MExcons
Mmods
Meangss
#Having found the means for the level of education for each group, we can draw a bar plot to compare means.
B <- c(13.52216, 13.03176, 13.26354, 13.26876, 13.21369, 12.21119, 12.48513, 12.92506)
barplot(B, main="Mean Educ by Polview", xlab="Polview Group", ylab="Means", names.arg=c("Lib","Cons","Sl Lib","Sl Cons","Ex Libs","Ex Cons","Mods", "Totmean"))
#It seems that 'Slightly Conservative', 'Liberal' and Slightly Liberal' groups have completed the most years of education on average, while 'Moderate' and 'Extremely Conservative' groups have completed the least years of education.
# Since we are comparing multiple groups and multiple means for our inference, we use ANOVA (even though we have a significant number of outliers. We need the counts for each group, so we can calculate and name these counts as follows:
Clibs = count(Libs)
Ccons = count(Cons)
CSlibs = count(Slibs)
CScons = count(Scons)
CExlibs = count(Exlibs)
CExcons = count(Excons)
Cmods = count(Mods)
Cgssfilt2 = count(gssfilt2)
Clibs
Ccons
CSlibs
CScons
CExlibs
CExcons
Cmods
Cgssfilt2
#We create a new column with the total mean in order to calculate the Sum of Squares Total (SST)later.
gssfilt2$Meangss1<-12.92506
#We can now calculate the Sum of Squares for each group as well as the total filtered population.
ssLib = Clibs*(Mlibs-Meangss)^2
ssCon = Ccons*(Mcons-Meangss)^2
ssSlib = CSlibs*(MSlibs-Meangss)^2
ssScon = CScons*(MScons-Meangss)^2
ssExlib = CExlibs*(MExlibs-Meangss)^2
ssExcon = CExcons*(MExcons-Meangss)^2
ssMod = Cmods*(Mmods-Meangss)^2
ssgssfilt2<-gssfilt2%>%
summarise(sum((educ-Meangss1)^2))
# We can now go ahead and calculate the 'Between-Group Sum of Squares' (also known as SSG)
SSG = ssMod+ssExlib+ssExcon+ssSlib+ssScon+ssCon+ssLib
